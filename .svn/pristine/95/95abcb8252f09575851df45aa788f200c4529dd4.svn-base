package kr.or.ddit.user.join.controller;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.PrivateKey;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;




import kr.or.ddit.member.service.IMemberService;
import kr.or.ddit.member.service.IMemberServiceImpl;
import kr.or.ddit.utiles.CryptoGenerator;
import kr.or.ddit.vo.MemberVO;

import org.apache.struts2.ServletActionContext;

// 액션 클래스 : 클라이언트의 요청을 처리하는 컨트롤러
// 스트럿츠 프레임웍은 액션 클래스 내 콜백 메서드(execute())
public class LoginCheckAction {
	// 액션 클래스의 콜백 메서드
	//   반환값 : 문자열
	//            <result name=액션 클래스의 액션 메서드의 반환값 맵핑
	//            ex) <result name="success">/WEB-INF/views/user/member/memberList.jsp
	//                <result name="loginForm">/WEB-INF/views/user/join/loginForm.jsp
	// http://localhost/StrutsToddler/join/loginCheck.do
	//    post : mem_id=a001&mem_pass=asdfasdf
	//    쿼리스트링 맵핑 처리 : 클라이언트로부터 전송되는 쿼리스트링의
	//                          키와 일치하는 전역변수와 해당 전역변수의
	//                          setter를 통해 쿼리스트링 값을 주입.
	private String mem_id;
	private String mem_pass;
	// 전역변수의 getter를 통해서 해당 전역변수의 값을
	// 스트럿츠 설정파일 내 EL 표기법을 활용해 사용 가능
	// <param name="message">${message}</param>
	
	
	private String message;
	
	public String execute(){
		HttpServletRequest request = ServletActionContext.getRequest();
//		request.getParameter("mem_id");
//		request.getParameter("mem_pass");
		HttpSession session = request.getSession();
//		HttpSession session = request.getSession(true);
//		HttpServletResponse response = ServletActionContext.getResponse();
		
		PrivateKey privateKey = (PrivateKey)session.getAttribute("privateKey");
		mem_id = CryptoGenerator.decryptRSA(privateKey, mem_id);
		mem_pass = CryptoGenerator.decryptRSA(privateKey, mem_pass);
		
		Map<String, String> params = new HashMap<String, String>();
		params.put("mem_id", this.mem_id);
		params.put("mem_pass", this.mem_pass);
		
		
		IMemberService service = IMemberServiceImpl.getInstance();
		MemberVO memberInfo = service.memberInfo(params);
		
		if(memberInfo == null){
			// type="redirectAction"의 경우 스트럿츠 인코딩 설정 적용
//			this.message = "회원이 아닙니다.";
			// type="redirect"
			try {
				this.message = URLEncoder.encode("회원이 아닙니다.", "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			return "loginForm";
		}else{
			session.setAttribute("LOGIN_MEMBERINFO", memberInfo);
			return "success";
		}
	}

	public void setMem_id(String mem_id) {
		this.mem_id = mem_id;
	}

	public void setMem_pass(String mem_pass) {
		this.mem_pass = mem_pass;
	}

	public String getMessage() {
		return message;
	}
}








